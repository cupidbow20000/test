import{ao as e,ar as D,as as L,aH as T,_ as m,aI as k,at as I,au as A,aJ as S,aK as x,aL as g,aM as V,aN as R,aO as $}from"./assets/index-BDcs8OaA.js";(function(){try{var a=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},s=new Error().stack;s&&(a._sentryDebugIds=a._sentryDebugIds||{},a._sentryDebugIds[s]="cbd22b09-ef87-426d-b7ec-00ea411623d8",a._sentryDebugIdIdentifier="sentry-dbid-cbd22b09-ef87-426d-b7ec-00ea411623d8")}catch{}})();const b=a=>{var s,n,i,t,c,r,o,d;switch(a){case e.Ethereum:case e.Avalanche:case e.BinanceSmartChain:case e.Arbitrum:case e.Optimism:case e.Polygon:return(s=window.xfi)==null?void 0:s.ethereum;case e.Binance:return(n=window.xfi)==null?void 0:n.binance;case e.Bitcoin:return(i=window.xfi)==null?void 0:i.bitcoin;case e.BitcoinCash:return(t=window.xfi)==null?void 0:t.bitcoincash;case e.Dogecoin:return(c=window.xfi)==null?void 0:c.dogecoin;case e.Litecoin:return(r=window.xfi)==null?void 0:r.litecoin;case e.THUNDERChain:return(o=window.xfi)==null?void 0:o.thorchain;case e.Cosmos:case e.Kujira:return(d=window.xfi)==null?void 0:d.keplr;default:return}},N=async({method:a,params:s,chain:n})=>{var i;const t=a==="deposit"?(i=window.xfi)==null?void 0:i.thorchain:b(n);return new Promise((c,r)=>{var o;(o=t?.request)==null||o.call(t,{method:a,params:s},(d,l)=>d?r(d):c(l))})},C=async a=>{const s=b(a);if(!s)throw new Error(`${a}: XDEFI provider is not defined`);if([e.Cosmos,e.Kujira].includes(a)){const n=b(e.Cosmos);if(!n)throw new Error(`${a}: XDEFI provider is not defined`);const i=T[a];await n.enable(i);const t=n.getOfflineSigner(i),[{address:c}]=await t.getAccounts();return c}else return[e.Ethereum,e.Avalanche,e.BinanceSmartChain,e.Arbitrum,e.Optimism,e.Polygon].includes(a)?(await s.request({method:"eth_requestAccounts",params:[]}))[0]:new Promise((n,i)=>s.request({method:"request_accounts",params:[]},(t,c)=>t?i(t):n(c[0])))},w=async({assetValue:a,recipient:s,memo:n,gasLimit:i},t="transfer")=>{if(!a)throw new Error("Asset is not defined");const c=await C(a.chain),r=[{amount:{amount:a.getBaseValue("number"),decimals:a.decimal},asset:{chain:a.chain,symbol:a.symbol.toUpperCase(),ticker:a.symbol.toUpperCase()},memo:n,from:c,recipient:s,gasLimit:i}];return N({method:t,params:r,chain:a.chain})},B=({chainId:a,rpcUrl:s})=>async({from:n,recipient:i,assetValue:t,memo:c})=>{var r,o;const{createSigningStargateClient:d}=await m(()=>import("./9Kp3GYpY.js").then(f=>f.s),__vite__mapDeps([0,1,2])),l=(o=(r=window.xfi)==null?void 0:r.keplr)==null?void 0:o.getOfflineSignerOnlyAmino(a),u=await d(s||A.Cosmos,l),h=[{denom:t?.symbol==="MUON"?"umuon":"uatom",amount:t.getBaseValue("string")}],{transactionHash:p}=await u.sendTokens(n,i,h,1.6,c);return p},U=a=>({call:async({contractAddress:s,abi:n,funcName:i,funcParams:t=[],txOverrides:c})=>{const r=a;if(!s)throw new Error("contractAddress must be provided");if(S(n,i)){const{value:d,from:l,to:u,data:h}=await x(r,{contractAddress:s,abi:n,funcName:i,funcParams:t,txOverrides:c});return a.send("eth_sendTransaction",[{value:g(BigInt(d||0)),from:l,to:u,data:h||"0x"}])}const o=await(await V(s,n,r))[i](...t);return typeof o?.hash=="string"?o?.hash:o},approve:async({assetAddress:s,spenderAddress:n,amount:i,from:t})=>{const c=[n,BigInt(i||R)],r={contractAddress:s,abi:$,funcName:"approve",funcParams:c,txOverrides:{from:t}},{value:o,to:d,data:l}=await x(a,r);return a.send("eth_sendTransaction",[{value:g(BigInt(o||0)),from:t,to:d,data:l||"0x"}])},sendTransaction:s=>{const{from:n,to:i,data:t,value:c}=s;if(!i)throw new Error("No to address provided");return a.send("eth_sendTransaction",[{value:g(BigInt(c||0)),from:n,to:i,data:t||"0x"}])}});e.Arbitrum,e.Avalanche,e.Binance,e.BinanceSmartChain,e.Bitcoin,e.BitcoinCash,e.Cosmos,e.Dogecoin,e.Ethereum,e.Kujira,e.Litecoin,e.Optimism,e.Polygon,e.THUNDERChain;const q=async({chain:a,blockchairApiKey:s,covalentApiKey:n,ethplorerApiKey:i})=>{var t,c;switch(a){case e.THUNDERChain:{const{DEFAULT_GAS_VALUE:r,ThorchainToolbox:o}=await m(()=>import("./9Kp3GYpY.js").then(d=>d.s),__vite__mapDeps([0,1,2]));return{...o({stagenet:!1}),deposit:d=>w({...d,recipient:""},"deposit"),transfer:d=>w({...d,gasLimit:r},"transfer")}}case e.Cosmos:{const{GaiaToolbox:r}=await m(()=>import("./9Kp3GYpY.js").then(o=>o.s),__vite__mapDeps([0,1,2]));return{...r(),transfer:B({chainId:I.Cosmos,rpcUrl:A.Cosmos})}}case e.Kujira:{const{KujiraToolbox:r}=await m(()=>import("./9Kp3GYpY.js").then(o=>o.s),__vite__mapDeps([0,1,2]));return{...r(),transfer:B({chainId:I.Kujira,rpcUrl:A.Kujira})}}case e.Binance:{const{BinanceToolbox:r}=await m(()=>import("./9Kp3GYpY.js").then(o=>o.s),__vite__mapDeps([0,1,2]));return{...r(),transfer:w}}case e.Bitcoin:case e.BitcoinCash:case e.Dogecoin:case e.Litecoin:{const{getToolboxByChain:r}=await m(()=>import("./oTdZkjon.js"),__vite__mapDeps([3,1,2]));return{...r(a)({apiKey:s}),transfer:w}}case e.Ethereum:case e.BinanceSmartChain:case e.Arbitrum:case e.Optimism:case e.Polygon:case e.Avalanche:{const{getProvider:r,prepareNetworkSwitch:o,getToolboxByChain:d,addEVMWalletNetwork:l,covalentApi:u,ethplorerApi:h,getBalance:p,BrowserProvider:f}=await m(()=>import("./assets/index-BDcs8OaA.js").then(_=>_.fi),__vite__mapDeps([1,2])),v=(t=window.xfi)==null?void 0:t.ethereum;if(!v)throw new Error("Requested web3 wallet is not installed");if(a!==e.Ethereum&&!n||a===e.Ethereum&&!i)throw new Error(`Missing API key for ${a} chain`);const y=new f(v,"any"),E=(await d(a))({provider:y,signer:await y.getSigner(),ethplorerApiKey:i||"",covalentApiKey:n||""}),K=U(y);try{a!==e.Ethereum&&await l(v,E.getNetworkParams())}catch{throw new Error(`Failed to add/switch ${a} network: ${a}`)}const O=a===e.Ethereum?h(i):u({apiKey:n,chainId:T[a]});return o({toolbox:{...E,...K,getBalance:(_,P)=>p({chain:a,provider:r(a),api:O,address:_,potentialScamFilter:P})},chainId:k[a],provider:(c=window.xfi)==null?void 0:c.ethereum})}default:return null}},j=({addChain:a,config:{covalentApiKey:s,ethplorerApiKey:n,blockchairApiKey:i,thorswapApiKey:t,utxoApiKey:c}})=>async r=>{D({apiKey:t});const o=r.map(async d=>{const l=await C(d),u=await q({chain:d,blockchairApiKey:i||c,covalentApiKey:s,ethplorerApiKey:n});a({chain:d,walletMethods:{...u,getAddress:()=>l},wallet:{address:l,balance:[],walletType:L.XDEFI}})});await Promise.all(o)},M={connectMethodName:"connectXDEFI",connect:j};export{M as xdefiWallet};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["9Kp3GYpY.js","assets/index-BDcs8OaA.js","assets/index-PWKo4Vxk.css","oTdZkjon.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
